# =============================================================================
# SIDECAR: Contenedor para monitorear y reportar token
# CASO: Template con puerto 8888 (Tiene Jupyter Lab)
# =============================================================================
apiVersion: v1
kind: Pod
metadata:
  name: jupyter-with-monitor
  labels:
    app: jupyter-monitor
    user: test-user
spec:
  restartPolicy: Never
  containers:
  # Contenedor principal
  - name: jupyter-app
    image: jupyter/base-notebook:latest   # Imagen base de Jupyter Lab (puede ser otra imagen que tenga Jupyter instalado)
    ports:
    - containerPort: 8888         # Puerto de Jupyter Lab creado del template
      name: jupyter               # Nombre de servicio obtenido del template
    volumeMounts:
    - name: shared-data
      mountPath: /workspace
    command: ["/bin/bash", "-c"]
    args:
    - |
      mkdir -p /workspace/notebooks
      cd /workspace
      
      # Iniciar Jupyter y capturar token
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root > /workspace/jupyter.log 2>&1 &
      
      # Esperar y extraer token de logs
      sleep 10
      grep -o 'token=[a-f0-9]*' /workspace/jupyter.log | head -1 | cut -d= -f2 > /workspace/.jupyter_token || echo "no-token" > /workspace/.jupyter_token
      
      # Mostrar información para debugging
      echo "=== JUPYTER INFO ==="
      echo "Token file content: $(cat /workspace/.jupyter_token)"
      echo "Jupyter URL: http://0.0.0.0:8888/lab?token=$(cat /workspace/.jupyter_token)"
      
      # Mantener vivo
      wait
  
  # Contenedor monitor/sidecar
  - name: token-monitor
    image: curlimages/curl:latest
    volumeMounts:
    - name: shared-data
      mountPath: /workspace
    command: ["/bin/sh", "-c"]
    args:
    - |
      echo "Iniciando monitor de token..."
      while true; do
        if [ -f /workspace/.jupyter_token ]; then
          TOKEN=$(cat /workspace/.jupyter_token)
          if [ "$TOKEN" != "no-token" ] && [ ! -z "$TOKEN" ]; then
            echo "Token detectado: $TOKEN"
            echo "URL completa: https://jupyter-usr123-8888.neuropod.online/lab?token=$TOKEN"
            
            # Aquí el backend podría hacer una llamada API para reportar el token
            # curl -X POST https://api.neuropod.online/api/pods/update-token \
            #   -H "Content-Type: application/json" \
            #   -d "{\"podId\":\"test-pod\",\"jupyterToken\":\"$TOKEN\"}"
            
            # Una vez reportado, dormir más tiempo
            sleep 300
          else
            echo "Esperando token válido..."
            sleep 5
          fi
        else
          echo "Esperando archivo de token..."
          sleep 5
        fi
      done
  volumes:
  - name: shared-data
    persistentVolumeClaim:
      claimName: jupyter-monitor-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyter-monitor-pvc
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: standard
  resources:
    requests:
      storage: 20Gi

---

# =============================================================================
# CASO 1: Imagen YA TIENE Jupyter (ej: jupyter/base-notebook)
# =============================================================================
apiVersion: v1
kind: Pod
metadata:
  name: jupyter-native-pod
  labels:
    app: jupyter-native
    user: test-user
spec:
  restartPolicy: Never
  containers:
  - name: jupyter-native
    image: jupyter/base-notebook:latest
    ports:
    - containerPort: 8888
      name: jupyter
    - containerPort: 8080
      name: custom-app
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    # Jupyter ya está instalado, solo configurar
    command: ["/bin/bash", "-c"]
    args:
    - |
      # Configurar Jupyter para usar el PVC
      mkdir -p /workspace/notebooks
      cd /workspace
      
      # Iniciar Jupyter sin token (para capturar token después)
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root &
      
      # Simular aplicación adicional en puerto 8080
      python3 -m http.server 8080 &
      
      # Mantener contenedor vivo
      wait
  volumes:
  - name: workspace
    persistentVolumeClaim:
      claimName: jupyter-native-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyter-native-pvc
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: standard
  resources:
    requests:
      storage: 20Gi