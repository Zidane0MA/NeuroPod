# Pod de prueba ComfyUI con GPU y PVC
apiVersion: v1
kind: Pod
metadata:
  name: comfyui-gpu-test
  labels:
    app: comfyui-test
    user: test-user
spec:
  restartPolicy: Never
  containers:
  - name: comfyui
    image: zhangp365/comfyui
    ports:
    - containerPort: 8188
      name: comfyui-web
    resources:
      limits:
        nvidia.com/gpu: "1"
        memory: 8Gi
        cpu: 4
      requests:
        nvidia.com/gpu: "1"
        memory: 4Gi
        cpu: 2
    env:
    - name: CLI_ARGS
      value: "--listen 0.0.0.0 --port 8188"
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    # Configurar ComfyUI para usar el PVC
    command: ["/bin/bash", "-c"]
    args:
    - |
      # Crear estructura de directorios en el PVC
      mkdir -p /workspace/models/checkpoints
      mkdir -p /workspace/models/loras  
      mkdir -p /workspace/models/vae
      mkdir -p /workspace/output
      mkdir -p /workspace/input
      
      # Crear enlaces simbólicos para que ComfyUI use el PVC
      ln -sf /workspace/models /app/ComfyUI/models
      ln -sf /workspace/output /app/ComfyUI/output
      ln -sf /workspace/input /app/ComfyUI/input
      
      # Iniciar ComfyUI
      cd /app/ComfyUI && python main.py --listen 0.0.0.0 --port 8188
  volumes:
  - name: workspace
    persistentVolumeClaim:
      claimName: comfyui-test-pvc

---
# PVC específico para este pod
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: comfyui-test-pvc
  labels:
    app: comfyui-test
    user: test-user
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi

---
# Service para ComfyUI
apiVersion: v1
kind: Service
metadata:
  name: comfyui-gpu-test-service
  labels:
    app: comfyui-test
spec:
  selector:
    app: comfyui-test
  ports:
  - port: 8188
    targetPort: 8188
    protocol: TCP
    name: comfyui
  type: ClusterIP

---
# Ingress para ComfyUI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: comfyui-gpu-test-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    # Headers estándar para WebSockets
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  ingressClassName: nginx  # ✅ USAR INGRESS CLASS ESTÁNDAR
  tls:  # ← CON sección TLS
  - hosts:
    - comfyui-5vrg43-8188.neuropod.online
    secretName: neuropod-tls
  rules:
  - host: comfyui-5vrg43-8188.neuropod.online
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: comfyui-gpu-test-service
            port:
              number: 8188