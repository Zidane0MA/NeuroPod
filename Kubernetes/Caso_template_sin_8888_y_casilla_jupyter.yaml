# =============================================================================
# CASO 1: Imagen CON Python pero SIN Jupyter (ej: ComfyUI)
# =============================================================================

# Pod de prueba ComfyUI con GPU y PVC + integración Jupyter Lab + captura automática de token
apiVersion: v1
kind: Pod
metadata:
  name: jupyter-token-capture
  labels:
    app: jupyter-token
    user: test-user
spec:
  restartPolicy: Never
  containers:
  - name: main-app
    image: zhangp365/comfyui  # Imagen sin Jupyter que viene del template
    ports:
    - containerPort: 8188     # Puerto de servicio creado al seleccionar template
      name: comfyui           # Nombre de servicio obtenido del template seleccionado
    - containerPort: 8888     # Puerto de Jupyter Lab creado al seleccionar casilla Jupyter Lab
      name: jupyter           # Nombre de servicio dado al seleccionar la casilla Jupyter Lab
    resources:
      limits:
        nvidia.com/gpu: "1"
        memory: 8Gi
        cpu: 4
      requests:
        nvidia.com/gpu: "1"
        memory: 4Gi
        cpu: 2
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: jupyter-config
      mountPath: /root/.jupyter
    command: ["/bin/bash", "-c"]
    args:
    - |
      # Actualizar sistema e instalar dependencias completas
      apt-get update && apt-get install -y \
        python3 python3-pip python3-venv curl wget

      # Crear estructura de directorios en el PVC
      mkdir -p /workspace/models/checkpoints
      mkdir -p /workspace/models/loras  
      mkdir -p /workspace/models/vae
      mkdir -p /workspace/output
      mkdir -p /workspace/input

      # Crear enlaces simbólicos para que ComfyUI use el PVC
      ln -sf /workspace/models /app/models
      ln -sf /workspace/output /app/output
      ln -sf /workspace/input /app/input
      
      # Instalar Jupyter Lab
      pip install jupyterlab ipywidgets pandas numpy matplotlib

      # Generar token conocido para Jupyter
      echo "Generando token conocido para Jupyter..."
      JUPYTER_TOKEN="neuropod-$(openssl rand -hex 16)"
      echo "Token generado: $JUPYTER_TOKEN"
      
      # Crear configuración de Jupyter con token fijo
      mkdir -p /root/.jupyter
      cat > /root/.jupyter/jupyter_lab_config.py << EOF
      c.ServerApp.token = '$JUPYTER_TOKEN'
      c.ServerApp.password = ''
      c.ServerApp.open_browser = False
      c.ServerApp.ip = '0.0.0.0'
      c.ServerApp.port = 8888
      c.ServerApp.allow_root = True
      c.ServerApp.root_dir = '/workspace'
      EOF
      
      # Escribir token a archivo para que el backend lo lea
      echo "$JUPYTER_TOKEN" > /workspace/.jupyter_token
      
      # Iniciar Jupyter Lab con configuración
      cd /workspace
      jupyter lab &
      JUPYTER_PID=$!
      
      # Esperar a que Jupyter inicie y verificar logs
      sleep 5
      echo "=== JUPYTER STARTUP LOGS ==="
      jupyter server list || true
      
      # Función para capturar token de logs (backup)
      capture_token_from_logs() {
        echo "Buscando token en logs de Jupyter..."
        timeout 30 bash -c '
          while true; do
            if jupyter server list 2>/dev/null | grep -o "token=[a-f0-9]*" | head -1 | cut -d= -f2 > /tmp/captured_token.txt; then
              if [ -s /tmp/captured_token.txt ]; then
                echo "Token capturado de logs: $(cat /tmp/captured_token.txt)"
                cp /tmp/captured_token.txt /workspace/.jupyter_token_captured
                break
              fi
            fi
            sleep 2
          done
        '
      }
      
      # Ejecutar captura en paralelo (backup)
      capture_token_from_logs &
      
      # Mantener contenedor vivo
      wait $JUPYTER_PID
  volumes:
  - name: workspace
    persistentVolumeClaim:
      claimName: jupyter-token-pvc
  - name: jupyter-config
    emptyDir: {}

---
# PVC específico para este pod
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyter-token-pvc
  labels:
    app: jupyter-token
    user: test-user
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi

# Service para jupyter-token
apiVersion: v1
kind: Service
metadata:
  name: jupyter-token-capture-service
  labels:
    app: jupyter-token
    user: test-user
spec:
  selector:
    app: jupyter-token
    user: test-user
  ports:
  - name: comfyui
    port: 8188
    targetPort: 8188
    protocol: TCP
  - name: jupyter
    port: 8888
    targetPort: 8888
    protocol: TCP
  type: ClusterIP

# Ingress para jupyter-token
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jupyter-token-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/keep-alive: "75"
    nginx.ingress.kubernetes.io/keep-alive-requests: "100"
    # Headers estándar para WebSockets
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  ingressClassName: neuropod-nginx
  tls:
  - hosts:
    - jupyter-token-usr123-8888.neuropod.online
    - comfyui-token-usr123-8188.neuropod.online
    secretName: neuropod-tls
  rules:
  # ComfyUI
  - host: comfyui-token-usr123-8188.neuropod.online
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jupyter-token-capture-service
            port:
              number: 8188
  # Jupyter
  - host: jupyter-token-usr123-8888.neuropod.online
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jupyter-token-capture-service
            port:
              number: 8888
---

# =============================================================================
# CASO 2: Imagen SIN Python y SIN Jupyter (ej: Ubuntu base, Alpine, etc.)
# =============================================================================

# Pod de prueba Ubuntu base con GPU y PVC + integración Jupyter Lab + captura automática de token
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-jupyter-pod
  labels:
    app: ubuntu-jupyter
    user: test-user
spec:
  restartPolicy: Never
  containers:
  - name: ubuntu-jupyter
    image: ubuntu:22.04
    ports:
    - containerPort: 8888
      name: jupyter
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: jupyter-config
      mountPath: /root/.jupyter
    command: ["/bin/bash", "-c"]
    args:
    - |
      # Actualizar sistema e instalar dependencias completas
      apt-get update && apt-get install -y \
        python3 python3-pip python3-venv curl wget

      # Crear estructura de directorios en el PVC
      mkdir -p /workspace/models/checkpoints
      mkdir -p /workspace/models/loras  
      mkdir -p /workspace/models/vae
      mkdir -p /workspace/output
      mkdir -p /workspace/input
      mkdir -p /workspace/notebooks

      # Instalar Jupyter Lab y librerías útiles
      pip3 install jupyterlab ipywidgets pandas numpy matplotlib

      # Generar token conocido para Jupyter
      echo "Generando token conocido para Jupyter..."
      JUPYTER_TOKEN="neuropod-$(openssl rand -hex 16)"
      echo "Token generado: $JUPYTER_TOKEN"

      # Crear configuración de Jupyter con token fijo
      mkdir -p /root/.jupyter
      cat > /root/.jupyter/jupyter_lab_config.py << EOF
      c.ServerApp.token = '$JUPYTER_TOKEN'
      c.ServerApp.password = ''
      c.ServerApp.open_browser = False
      c.ServerApp.ip = '0.0.0.0'
      c.ServerApp.port = 8888
      c.ServerApp.allow_root = True
      c.ServerApp.root_dir = '/workspace'
      EOF

      # Escribir token a archivo para que el backend lo lea
      echo "$JUPYTER_TOKEN" > /workspace/.jupyter_token

      # Iniciar Jupyter Lab con configuración
      cd /workspace
      jupyter lab &
      JUPYTER_PID=$!

      # Esperar a que Jupyter inicie y verificar logs
      sleep 5
      echo "=== JUPYTER STARTUP LOGS ==="
      jupyter server list || true

      # Función para capturar token de logs (backup)
      capture_token_from_logs() {
        echo "Buscando token en logs de Jupyter..."
        timeout 30 bash -c '
          while true; do
            if jupyter server list 2>/dev/null | grep -o "token=[a-f0-9]*" | head -1 | cut -d= -f2 > /tmp/captured_token.txt; then
              if [ -s /tmp/captured_token.txt ]; then
                echo "Token capturado de logs: $(cat /tmp/captured_token.txt)"
                cp /tmp/captured_token.txt /workspace/.jupyter_token_captured
                break
              fi
            fi
            sleep 2
          done
        '
      }

      # Ejecutar captura en paralelo (backup)
      capture_token_from_logs &

      # Mantener contenedor vivo
      wait $JUPYTER_PID
  volumes:
  - name: workspace
    persistentVolumeClaim:
      claimName: ubuntu-jupyter-pvc
  - name: jupyter-config
    emptyDir: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ubuntu-jupyter-pvc
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: standard
  resources:
    requests:
      storage: 30Gi

---

# Service para ubuntu-jupyter-pod
apiVersion: v1
kind: Service
metadata:
  name: ubuntu-jupyter-service
  labels:
    app: ubuntu-jupyter
    user: test-user
spec:
  selector:
    app: ubuntu-jupyter
    user: test-user
  ports:
  - name: jupyter
    port: 8888
    targetPort: 8888
    protocol: TCP
  type: ClusterIP

---

# Ingress para ubuntu-jupyter-pod
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ubuntu-jupyter-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/keep-alive: "75"
    nginx.ingress.kubernetes.io/keep-alive-requests: "100"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  ingressClassName: neuropod-nginx
  tls:
  - hosts:
    - ubuntu-jupyter-usr123-8888.neuropod.online
    secretName: neuropod-tls
  rules:
  - host: ubuntu-jupyter-usr123-8888.neuropod.online
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ubuntu-jupyter-service
            port:
              number: 8888