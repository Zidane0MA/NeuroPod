# Manifiestos Kubernetes para NeuroPod
# Aplicar en orden con: kubectl apply -f este-archivo.yaml

---
# ConfigMap Neuropod - Configuración global del proyecto
apiVersion: v1
kind: ConfigMap
metadata:
  name: neuropod-config
  namespace: default
  labels:
    app: neuropod
    component: config
data:
  domain: "neuropod.online"            # Dominio base para todos los subdominios
  defaultStorageClass: "standard"      # Tipo de almacenamiento a usar por defecto
  maxPodsPerUser: "5"                  # Límite de pods por usuario
  workspacePath: "/workspace"          # Ruta del volumen persistente en contenedores
  defaultNamespace: "default"          # Namespace donde se crean los pods de usuario

---
# IngressClass Neuropod - Clase de ingress dedicada para el proyecto
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: neuropod-nginx
  labels:
    app: neuropod
    component: ingress
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx

---
# ConfigMap NGINX - Configuración específica para NGINX Ingress Controller
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app: neuropod
    component: nginx-config
data:
  # Permite manejar nombres de servidor largos (subdominios dinámicos)
  server-name-hash-bucket-size: "256"
  # Mejora el manejo de cabeceras HTTP grandes (tokens, etc.)
  proxy-buffer-size: "16k"
  # Importante para trabajar con Cloudflare Tunnel
  use-forwarded-headers: "true"
  # Configuración para WebSockets (Jupyter Lab)
  proxy-read-timeout: "3600"
  proxy-send-timeout: "3600"
  # Configuración adicional para mejor rendimiento
  worker-processes: "auto"
  max-worker-connections: "16384"
  # SSL y seguridad
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"

---
# Storage Class - Clase de almacenamiento para volúmenes persistentes
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
  labels:
    app: neuropod
    component: storage
provisioner: k8s.io/minikube-hostpath
reclaimPolicy: Retain              # Mantener datos al eliminar PVC
volumeBindingMode: Immediate       # Asignar volumen inmediatamente
allowVolumeExpansion: true         # Permitir expansión de volúmenes
parameters:
  type: "hostPath"

---
# Persistent Volume Global - Volumen base para todos los workspaces de usuario
apiVersion: v1
kind: PersistentVolume
metadata:
  name: neuropod-pv-global
  labels:
    app: neuropod
    component: storage
    type: workspace
spec:
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany                # Permite acceso desde múltiples pods
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /mnt/data/workspace      # Ruta en el host (nodo de Minikube)
    type: DirectoryOrCreate        # Crear directorio si no existe

---
# Service Account para pods con GPU
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neuropod-gpu-sa
  namespace: default
  labels:
    app: neuropod
    component: rbac
    feature: gpu

---
# ClusterRoleBinding para pods con GPU
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: neuropod-gpu-crb
  labels:
    app: neuropod
    component: rbac
    feature: gpu
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit                       # Rol predefinido con permisos de edición
subjects:
- kind: ServiceAccount
  name: neuropod-gpu-sa
  namespace: default

---
# Namespace adicional para recursos de sistema (opcional)
apiVersion: v1
kind: Namespace
metadata:
  name: neuropod-system
  labels:
    app: neuropod
    component: system

---
# NetworkPolicy - Aislamiento de red entre pods de diferentes usuarios
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: neuropod-isolation
  namespace: default
  labels:
    app: neuropod
    component: security
spec:
  podSelector:
    matchLabels:
      app: neuropod-user-pod
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Permitir tráfico desde NGINX Ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # Permitir tráfico interno del mismo usuario
  - from:
    - podSelector:
        matchLabels:
          neuropod-user: "same-user"
  egress:
  # Permitir todo el tráfico saliente (Internet, DNS, etc.)
  - {}

---
# Secret para certificados TLS (opcional, para comunicación interna)
apiVersion: v1
kind: Secret
metadata:
  name: neuropod-tls
  namespace: default
  labels:
    app: neuropod
    component: security
type: kubernetes.io/tls
data:
  # Estos valores serían generados con:
  # openssl req -x509 -nodes -days 365 -newkey rsa:2048 `
  #    -keyout tls.key -out tls.crt -config openssl.conf -extensions v3_req
  # kubectl create secret tls neuropod-tls --key tls.key --cert tls.crt --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTi... # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Base64 encoded private key

---
# ConfigMap para scripts de inicialización (helpers)
apiVersion: v1
kind: ConfigMap
metadata:
  name: neuropod-scripts
  namespace: default
  labels:
    app: neuropod
    component: scripts
data:
  install-jupyter.sh: |
    #!/bin/bash
    # Script para instalar Jupyter Lab en contenedores que no lo tienen
    echo "Instalando Jupyter Lab..."
    pip install jupyterlab
    echo "Jupyter Lab instalado correctamente"
  
  setup-workspace.sh: |
    #!/bin/bash
    # Script para configurar el workspace inicial
    mkdir -p /workspace/notebooks
    mkdir -p /workspace/data
    mkdir -p /workspace/models
    echo "Workspace configurado"
    
  health-check.sh: |
    #!/bin/bash
    # Script básico de health check
    curl -f http://localhost:$1/health || exit 1